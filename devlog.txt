***Template***
firstL -- 2016-12-Date Time
	What was accomplished

Group -- 2016-12-2 2:05pm-2:50pm
	Contined formulating Design pdf. Breakthroughs included:
	- Deciding to contruct the back end before extra BootStrap/css/html
	- Timeline
	- Start of work distribution
	- Needed files

Group -- 2016-12-3 4:00pm-6:00pm
	Met at Joe & the Juice. Breakthroughs included:
	- Completing Site map
	- Completing Component map
	- Distributing work
	- Gathering APIs
	- Created file tree
	- Wrote skeleton of app.py
	- Created fake Spotify accout
	- Created timeline
	- Finished design doc

SeijiY -- 2016-12-4 4:46pm
	Finished a basic implementation of OAuth for Spotify
	- Running app.py will display a single link to log in to Spotify
	- After a callback, the user's access token, raw profile data and raw saved tracks data will be displayed
	- Added comments to all changes made in the files (app.py, utils/sift.py)
	- Will need to implement the 'state' parameter in the initial request
	- Still need to figure out how to implement the 'refresh_token'

SarahY -- 2016-12-5 12:58am
       Mostly finished sift.py
       - parse_json( tracks_raw_dict ) takes json in raw form of tracks and converts it to a normal dict
       - get_saved_tracks(access_token) returns parsed tracks_dict with all of the user's library, instead of latest 50 songs
       - ^^ not perfect though, not sure how to stop once actual library size is met (right now, hardcoded at 1000)
       - After logging in to Spotify, dashboard now displays list of tuples
       - each tuple has the artist name and the number of songs saved from that artist
       - tuples are in order from greatest number of songs to least
       - list of tuples is top n artists (n can be changed in app.py's calling of get_top_n_artists)
       - note: list of tuples instead of dictionary
       - another issue: not quite sure how to get artist's pfp from spotify, but this shouldn't be too hard and can be added easily to the tuple
       - BUG: not sure why, but for some of the artists the number of songs is far less than what it should be...
       - Related ^^: artists are separated (i.e., if you have a song by Disclosure and Eliza Doolittle, the artists will be in the list separately
       - To Do (other than fix these bugs): separate out authorization stuff from sift.py
       
SeijiY -- 2016-12-4 7:56pm
	Separated sift.py into two files (auth and sift)
	- Implement state param to the authentication process
	- Display all saved tracks (no need for upper bound limit)
	- Still need to figure out refresh token (refresh after every request?)
	- Since all the functions to sift through the tracks (in app.py) keep referring to previous functions, we should save all the info we need
	  from the user after we log in, and then get our info from then. Right now, what we have is very unwieldy
	- sift.py has new function data, which just takes an API endpoint and returns its json data.
	- top_artists now returns an ordered dict instead of a list of tuples
	- Dashboard now displays all saved tracks and the top 10 artists (by number of tracks saved)
	- No new bugs (that I know of...)

MaddieO -- 2016-12-4 9:00pm
	Created/used dbUtil.py
	- Supposed to write to DB
	- Constructed DB
	- Made another fake spotify because I wrote the password down wrong in class oops
	- I can't even hardcode values into the DB and I don't know why I'm using INSERT INTO Users VALUES ()

SeijiY -- 2016-12-4 7:43pm
	Added refresh_token implementation.

MaddieO -- 2016-12-6 10:00pm
	- Added basic logout functionality for test cases
	- Developed db to connect usernames
	- update location fxn

SarahY -- 2016-12-7 2:30am
       - Wrote tix.py
           - get_events_id(...) takes an artist and a city and returns a list of event ids with the artist name as a keyword. Returns an empty list if no upcoming events are found.
	   - event(...) takes an event id and creates a dictionary with the attributes we care about: date, url, status (commented out), latitude/longitude (commented out)
	   - get_events(...) takes an artist and a list of event ids and returns a list of dict-ified events (adds artist attribute to each)
	   - get_event_list(...) takes list of top n artists and the user's city and returns list of dicts (events)
       - Started planning sort.py
           - didn't get too far, but...
	   - conveniently, default order for event list is by artist, from greatest # of songs to least
	   - was about to manually write up sort-by-date, but I feel like there must be a better way to sort a list of dictionaries by a certain key so I'm holding off on that
	     (@ Seiji, what'd you do for artist_numtrack_dict...?)
	   - figured out how to get latitude and longitude of an event on ticketmaster
	   - also figured out how to use Google Maps API to get distance between two points (in latitude/longitude form)
	   - we have an issue though: ipinfo.io gives you your latitude/longitude but it's not precise enough so it doesn't give you your real address
	   - since we're looking for events in the same city, the small differences matter!
	   - was looking into Google Maps API for geolocation but there are a bunch of parameters that I don't understand...

SeijiY -- 2016-12-7 9:06pm
	- Added Debug messages everywhere
	- artist data will be obtained @ /login so that the dashboard can load faster (data will be stored in the DB for other paths to obtain from)
	- Added the corresponding functions for this in dbUtil.py
	- rewrote top_n function in sift, making it more streamlined (and we don't save data about tracks we don't need)
	- bug: ticketmaster calls are ridiculously slow (1 minute for 40 artists) (could move these to be done during login, but that would just shift the problem on to login)

MaddieO -- 2016-12-8 12:18am
	- Outlined/sketched front-end layouts and planned Bootstrap for dashboard.html, event.html, account.html

SarahY -- 2016-12-8 2:32am
       - Updated tix.py so that city is no longer hardcoded (tix.get_city() gets called when app.py is run)
       - Updated sort.py to add sort_by_date which just sorts the event_list chronologically (works)
       - Updated sort.py to add sort_by_status which returns a dict:
       	 { Going:[ {event}, {event}, {event} ],
	   Interested:[ {event}, {event}, {event} ],
	   Unmarked:[ {event}, {event}, {event} ], }
	 --> each is sorted chronologically
	 Tried some test cases locally but didn't work with actual data because we haven't implemented the Going/Interested/Unmarked thing yet

